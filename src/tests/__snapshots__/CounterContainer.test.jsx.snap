// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CounterContainer
    counter={0}
    decrement={[Function]}
    increment={[Function]}
    incrementIfOdd={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <pure(Counter)
          counter={0}
          decrement={[Function]}
          increment={[Function]}
          incrementIfOdd={[Function]}
/>,
        <a
          href="/newPage"
>
          Go to the new page
</a>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "counter": 0,
          "decrement": [Function],
          "increment": [Function],
          "incrementIfOdd": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Go to the new page",
          "href": "/newPage",
        },
        "ref": null,
        "rendered": "Go to the new page",
        "type": "a",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <pure(Counter)
            counter={0}
            decrement={[Function]}
            increment={[Function]}
            incrementIfOdd={[Function]}
/>,
          <a
            href="/newPage"
>
            Go to the new page
</a>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "counter": 0,
            "decrement": [Function],
            "increment": [Function],
            "incrementIfOdd": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Go to the new page",
            "href": "/newPage",
          },
          "ref": null,
          "rendered": "Go to the new page",
          "type": "a",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CounterContainer
    counter={0}
    decrement={[Function]}
    increment={[Function]}
    incrementIfOdd={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <pure(Counter)
          counter={0}
          decrement={[Function]}
          increment={[Function]}
          incrementIfOdd={[Function]}
/>,
        <a
          href="/newPage"
>
          Go to the new page
</a>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "counter": 0,
          "decrement": [Function],
          "increment": [Function],
          "incrementIfOdd": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Go to the new page",
          "href": "/newPage",
        },
        "ref": null,
        "rendered": "Go to the new page",
        "type": "a",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <pure(Counter)
            counter={0}
            decrement={[Function]}
            increment={[Function]}
            incrementIfOdd={[Function]}
/>,
          <a
            href="/newPage"
>
            Go to the new page
</a>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "counter": 0,
            "decrement": [Function],
            "increment": [Function],
            "incrementIfOdd": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Go to the new page",
            "href": "/newPage",
          },
          "ref": null,
          "rendered": "Go to the new page",
          "type": "a",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
